{"version":3,"file":"extension.js","mappings":"kCAAAA,EAAOC,QAAUC,QAAQ,YCCrBC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,IAOV,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,Q,uGCnBf,eAIA,oBAAyBQ,GAGvBC,QAAQC,IAAI,6DAKZ,IAAIC,EAAaC,EAAOC,SAASC,gBAAgB,uBAAuB,KAGtEF,EAAOG,OAAOC,uBAAuB,sCAGvCR,EAAQS,cAAcC,KACpBN,EAAOO,MAAMC,wBAAwBC,IACrBT,EAAOO,MAAMG,sCACTV,EAAOO,MAAMI,oBAAoBC,2BACnDZ,EAAOG,OAAOC,uBAAuB,2BAGzCR,EAAQS,cAAcC,KAAKP,IAI7B,2B","sources":["webpack://CodeGram/external commonjs \"vscode\"","webpack://CodeGram/webpack/bootstrap","webpack://CodeGram/./src/extension.ts"],"sourcesContent":["module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from \"vscode\";\n\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n  // Use the console to output diagnostic information (console.log) and errors (console.error)\n  // This line of code will only be executed once when your extension is activated\n  console.log('Congratulations, your extension \"CodeGram\" is now active!');\n\n  // The command has been defined in the package.json file\n  // Now provide the implementation of the command with registerCommand\n  // The commandId parameter must match the command field in package.json\n  let disposable = vscode.commands.registerCommand(\"CodeGram.helloWorld\", () => {\n    // The code you place here will be executed every time your command is executed\n    // Display a message box to the user\n    vscode.window.showInformationMessage(\"Stay tuned through CodeGram.io!\");\n  });\n\n  context.subscriptions.push(\n    vscode.debug.onDidChangeBreakpoints((session) => {\n      let factory = vscode.debug.registerDebugAdapterDescriptorFactory;\n      let breakpoints = vscode.debug.activeDebugSession?.getDebugProtocolBreakpoint;\n      vscode.window.showInformationMessage(\"Breakpoint changed!\");\n    })\n  );\n  context.subscriptions.push(disposable);\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {}\n"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","context","console","log","disposable","vscode","commands","registerCommand","window","showInformationMessage","subscriptions","push","debug","onDidChangeBreakpoints","session","registerDebugAdapterDescriptorFactory","activeDebugSession","getDebugProtocolBreakpoint"],"sourceRoot":""}